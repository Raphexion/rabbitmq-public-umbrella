The current persistence framework does not handle cross-node
messaging. The problem is that messages are persisted on the node to
which the producer is connected, but acks will be persisted on the
node to which the consumer is connected.

The plan is to address this with the following revised design:

Persistence is made the responsibility of *queues*; channels no longer
have any interaction with the persister.

As a corollary, the responsibility for embargoing publication and
acknowledgement in the transactional case is also shifted from the
channels to the queues.


Channel responsibilities
------------------------

On tx.begin (and commit and rollback, since these start new
transactions), the channel obtains a fresh globally unique tx id.

The channel passes message publication and acknowledgement straight to
the appropriate queues; it does not embargo them until commit. Routing
happens as at present, using the exchange/binding tables and
delivery_tag -> message_tag x queue mapping maintained by the channel
respectively. The tx id is passed as part of the request to the
queues. The channel maintains a set of all queues that are
participating in the current tx.

On commit or rollback, the channel passes the commit/rollback request
to all queues that have participated in the tx and waits for a
response. commit/rollback-ok is returned when all queues respond with
'ok'. The channel's tx participant set is cleared on
commit/rollback. NB: just like at present, there is no 2pc and as a
result no atomicity guarantees; a commit/rollback may succeed on some
queues and fail on others.

Channels no longer need an uncommitted_publish_q. They *do* still need
an uncommitted_ack_q and unacked_message_q so that they can maintain
the delivery_tag -> message_tag x queue mapping on commit/rollback.


Queue responsibilities
----------------------

Queues maintain a per-tx queue of embargoed publications and acks,
that they act upon/clear on tx commit/rollback.

For publication and acknowledgement of persistent messages, the
queues asynchronously inform the node-local persister, passing the
message and tx id (if present), and the message id and tx id (if
present) respectively.

On tx commit/rollback, the queues synchronously inform the local
persister of the commit/rollback decision.


Persister responsibilities
--------------------------

The persister works similarly as at present, with the following
changes:

- messages will be logged once for each queue they have been delivered
too

- exactly one ack is expected for every message log entry

- there is no explicit transaction start

- on node restart the persister redelivers to their queues all
messages in committed transactions for which it has no recorded ack,
and discards all other messages (including messages whose queue does
not exist). The redelivery flag on the redelivered messages is
set. Note that this means some message will have the redelivery flag
set even though they have never actually been delivered to a consumer;
but this is unavoidable.


"Immediate" messages
--------------------

We are going to change the semantics of the "immediate" flag in the
transactional case. At present, a basic.return is generated when at
commit time an "immediate" message cannot be immediately delivered to
a consumer. By contrast, the conditions for the "mandatory" flag are
checked straight away, rather than delayed until commit time; so the
current setup is awkward already.

In the new design the conditions for the "immediate" flag are checked
straight away. This simplifies the code but also means that the
outcome will differ from the current behaviour when consumers
(un)register with a queue between the time of publication and commit.


Optimisations
-------------

- message publication, and tx.commit/rollback can all be done via
rabbit_router, which maximises parallelism and reduces inter-node
communication. Currently the router only handles publication; it will
need to generalised / extended to handle commit/rollback too.

- the persister can keep track of logged publications and only log
every message *once* with a separate log entry for every queue it got
delivered to.


Implementation plan
===================

1) mark messages as redelivered on node recovery


2) implicit tx begin

- remove persister:begin_transacation
- get channel to obtain tx key itself (prob using rabbit_gensym)
- change gc_persist's integrate_messages and snapshot loading/replay
to detect new transactions


3) change from per-message to per-message&queue persistence

- get channel to call to persister once for every queue a message gets
delivered to
- tweaks to datastructures and algorithms in persister and gc_persist
that do ack correlation


4) move tx embargoing from channel to queues

- add per-tx message and ack queues to queues
- get channel to forward publishes and acks to queues straight away
- deal with "immediate" flag straight away
- get channel to maintain "queues participating in tx" set
- drop uncommitted_publish_q from channel
- get channel to pass commit/rollback requests to all tx participants
- get queue to act on commit/rollback requests


5) move persister interaction from channel to queues


6) optimise persister to only log messages once

- get gc_persist:integrate_messages to return a compressed list of
stuff to log


7) optimise distribution of commit/rollback from channel to queues

- at the minimum we should use upmap
- beyond that, we can change the channel's tx participant data
structure from a simple set of handlers to a map from nodes to
handlers and add a 'map' function to rabbit_router that works
analogous to the existing 'deliver' function.

